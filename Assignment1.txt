Understanding Data Types
1. What type would you choose for the following “numbers”?
A person’s telephone number: string
A person’s height : float
A person’s age : int
A person’s gender (Male, Female, Prefer Not To Answer) : enum
A person’s salary: decimal
A book’s ISBN: string
A book’s price: decimal
A book’s shipping weight: float
A country’s population: long
The number of stars in the universe: ulong
The number of employees in each of the small or medium businesses in the United Kingdom (up to about 50,000 employees per business): int
2. What are the difference between value type and reference type variables?
Value Types:
    Stored in: Stack
    Examples: int, float, bool, struct
    Characteristics:
        Directly contains data.
        When assigned to a new variable, the value is copied.
        Lifecycle is managed by the context in which they are declared.

Reference Types:
    Stored in: Heap
    Examples: class, array, string, interface
    Characteristics:
        Contains a reference to the actual data.
        When assigned to a new variable, the reference is copied, not the data itself.
        Managed by the garbage collector.

What is boxing and unboxing?
Boxing: The process of converting a value type to a reference type by wrapping the value inside a System.Object. i.e: int num = 123; object obj = num; // Boxing
Unboxing: The process of extracting the value type from the object. i.e: object obj = 123; int num = (int)obj; // Unboxing

3. What is meant by the terms managed resource and unmanaged resource in .NET
Managed Resource:
    Definition: Resources that are managed by the .NET runtime's garbage collector.
    Examples: Memory allocated for .NET objects, managed arrays, strings.
    Characteristics: Automatically cleaned up by the garbage collector when no longer in use.
Unmanaged Resource:
    Definition: Resources that are not managed by the .NET runtime and require explicit cleanup.
    Examples: File handles, database connections, COM objects, memory allocated via P/Invoke.
    Characteristics: Requires explicit code to release resources, typically done using Dispose method or a destructor.
    
    
4. Whats the purpose of Garbage Collector in .NET?
The Garbage Collector (GC) in .NET is responsible for automatic memory management. 
Its main purposes include:
    Automatic Memory Reclamation: Frees up memory used by objects that are no longer accessible in the application.
    Avoid Memory Leaks: Helps to prevent memory leaks by ensuring that unused objects are properly disposed of.
    Efficiency: Manages memory more efficiently by allocating and deallocating memory as needed.
    Generational Collection: Uses a generational approach to optimize the collection process by categorizing objects based on their lifespan.
    
    
Controlling Flow and Converting Types
1. What happens when you divide an int variable by 0?
    Dividing an int by 0 throws a DivideByZeroException at runtime.
2. What happens when you divide a double variable by 0?
    Dividing a double by 0 results in Infinity or -Infinity depending on the sign of the numerator, or NaN (Not a Number) if the numerator is also 0.
3. What happens when you overflow an int variable, that is, set it to a value beyond its range?
    If an int variable overflows, it wraps around to the minimum value of the int range if you are not using checked context. In a checked context, it throws an OverflowException.
4. What is the difference between x = y++; and x = ++y;?
    x = y++;: Post-increment. y is assigned to x first, then y is incremented.
    x = ++y;: Pre-increment. y is incremented first, then the incremented value of y is assigned to x.
5. What is the difference between break, continue, and return when used inside a loop statement?
    break: Exits the loop immediately.
    continue: Skips the current iteration and proceeds to the next iteration of the loop.
    return: Exits the method in which the loop is contained, ending execution of the method.
6. What are the three parts of a for statement and which of them are required?
    1. Initialization: Executed once at the beginning.
    2. Condition: Checked before each iteration.
    3. Iterator: Executed after each iteration.
    Required: The condition part is required to avoid an infinite loop. The initialization and iterator can be omitted but the semicolons are still necessary.
7. What is the difference between the = and == operators?
    =: Assignment operator, assigns a value to a variable.
    ==: Equality operator, compares two values for equality.
8. Does the following statement compile? for ( ; true; ) ;
    Yes, because this is a valid infinite loop that does nothing because the loop body is empty.
9. What does the underscore _ represent in a switch expression?
    The underscore _ is a discard pattern in a switch expression, representing a match for any value not explicitly matched by other patterns. It is used as a default case.
10. What interface must an object implement to be enumerated over by using the foreach statement?
    IEnumerable or IEnumerable<T> interface.